import os


def logger(path):
    def __logger(old_function):
        def new_function(*args, **kwargs):
            from datetime import datetime  # локальный импорт, чтобы не трогать шапку

            result = old_function(*args, **kwargs)

            line = (
                f"{datetime.now():%Y-%m-%d %H:%M:%S} | "
                f"{old_function.__name__} | "
                f"args={args} kwargs={kwargs} | "
                f"return={result}\n"
            )
            with open(path, 'a', encoding='utf-8') as f:
                f.write(line)

            return result

        return new_function

    return __logger


def test_2():
    paths = ('log_1.log', 'log_2.log', 'log_3.log')

    for path in paths:
        if os.path.exists(path):
            os.remove(path)

    @logger(paths[0])
    def hello_world():
        return 'Hello World'

    @logger(paths[1])
    def summator(a, b=0):
        return a + b

    @logger(paths[2])
    def div(a, b):
        return a / b

    assert 'Hello World' == hello_world(), "Функция возвращает 'Hello World'"
    result = summator(2, 2)
    assert isinstance(result, int), 'Должно вернуться целое число'
    assert result == 4, '2 + 2 = 4'
    result = div(6, 2)
    assert result == 3, '6 / 2 = 3'
    summator(4.3, b=2.2)  # запишет 4.3, 2.2 и 6.5 в лог
    summator(a=0, b=0)  # ещё одна запись в лог

    for path in paths:
        assert os.path.exists(path), f'файл {path} должен существовать'

        with open(path, encoding='utf-8') as log_file:
            log_file_content = log_file.read()

        assert 'summator' in log_file_content or 'hello_world' in log_file_content or 'div' in log_file_content, \
            'должно записаться имя функции'
        for item in (4.3, 2.2, 6.5):
            # где-то из этих трёх файлов появятся эти числа (в логах summator)
            if 'summator' in log_file_content:
                assert str(item) in log_file_content, f'{item} должен быть записан в файл'


if __name__ == '__main__':
    test_2()
